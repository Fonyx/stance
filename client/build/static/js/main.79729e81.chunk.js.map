{"version":3,"sources":["utils/auth.js","components/Navbar.jsx","components/Footer.jsx","components/CreateAccountSteps/CoreDetails.jsx","components/CreateAccountSteps/SpecificMoneyDetails.jsx","components/CreateAccountSteps/SpecificCryptoDetails.jsx","utils/queries.js","components/CreateAccountSteps/SpecificStockDetails.jsx","utils/mutations.js","components/CreateAccountSteps/TagGoalDetails.jsx","components/CreateAccountSteps/CreateAccountSteps.jsx","pages/Landing.js","pages/Home.js","pages/SignIn.js","pages/SignUp.js","pages/Account.js","pages/CreateTransaction.js","App.js","reportWebVitals.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","Error","setItem","window","location","assign","Navbar","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","aria-label","mr","Typography","variant","component","AuthService","loggedIn","Fragment","Button","onClick","event","preventDefault","logout","href","Footer","useState","value","setValue","BottomNavigation","showLabels","onChange","newValue","BottomNavigationAction","label","icon","CoreDetails","parties","values","handleChange","handleSelectChange","nextStep","errors","setErrors","FormControl","width","InputLabel","id","Select","labelId","type","MenuItem","TextField","name","placeholder","openingBalance","Autocomplete","disablePortal","clearOnBlur","selectOnFocus","handleHomeEndKeys","options","getOptionLabel","option","isOptionEqualToValue","renderInput","params","e","valid","errorBuffer","push","isNaN","toString","indexOf","length","validateFormSubmit","console","log","map","error","SpecificMoneyDetails","currencies","handleSelectCurrency","prevStep","props","InputProps","endAdornment","InputAdornment","currency","interestRate","SpecificCryptoDetails","cryptos","handleSelectCrypto","assetCode","QUERY_USER_ACCOUNTS","gql","QUERY_ACCOUNT_TRANSACTIONS","QUERY_GET_ALL_PRIMITIVES","QUERY_STOCK_CHECK","SpecificStockDetails","exchanges","handleSelectExchange","useLazyQuery","stockCheck","loading","data","checkStockCode","exists","variables","exchangeCode","SIGN_IN","SIGN_UP","CREATE_TRANSACTION","CREATE_ACCOUNT_FE","TagGoalDetails","handleGoalDateChange","useMutation","createAccount","accountReturn","message","sendForm","LocalizationProvider","dateAdapter","AdapterDateFns","locale","enLocale","tags","DatePicker","required","goalDate","newDate","goalAmount","startAdornment","initialFormState","compounds","party","AccountForm","formState","setFormState","step","setStep","useQuery","getAllPrimitives","cryptoDupNames","crypto","Name","uniqueCryptos","filter","index","input","target","floated","parseFloat","partyName","textContent","partyId","find","_id","CurrencyName","currencyId","cryptoName","cryptoCode","Code","exchangeName","exchange","code","date","Landing","Grid","container","spacing","direction","alignItems","justifyContent","style","minHeight","item","xs","ButtonGroup","Home","userAccounts","className","userAccount","LinkComponent","Link","to","balance","SignIn","email","password","login","handleFormSubmit","a","signIn","onSubmit","cursor","Signup","username","signUp","Account","useParams","userAccountTransactions","transaction","description","amount","CreateTransaction","toAccount","setToAccount","fromAccount","setFromAccount","setDescription","setAmount","frequency","setFrequency","setDate","endRecurrence","setEndRecurrence","createTransaction","transactionReturn","handleInputChange","payload","reload","accountName","account","fundsAvailable","minDate","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","apolloClient","ApolloClient","link","concat","cache","InMemoryCache","theme","createTheme","typography","fontFamily","fontWeight","palette","primary","light","main","dark","contrastText","secondary","App","ApolloProvider","client","ThemeProvider","Container","exact","path","SignUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79729e81.chunk.js","sourcesContent":["import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n\r\n    getProfile() {\r\n        let data = decode(this.getToken());\r\n        return data;\r\n    }\r\n\r\n    loggedIn() {\r\n        const token = this.getToken();\r\n        // If there is a token and it's not expired, return `true`\r\n        return token && !this.isTokenExpired(token) ? true : false;\r\n    }\r\n\r\n    isTokenExpired(token) {\r\n        // Decode the token to get its expiration time that was set by the server\r\n        const decoded = decode(token);\r\n        // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\r\n        if (decoded.exp < Date.now() / 1000) {\r\n            localStorage.removeItem('id_token');\r\n            return true;\r\n        }\r\n        // If token hasn't passed its expiration time, return `false`\r\n        return false;\r\n    }\r\n\r\n    getToken() {\r\n        return localStorage.getItem('id_token');\r\n    }\r\n\r\n    login(idToken) {\r\n        if(idToken === 'undefined'){\r\n            throw new Error('Token received was \"undefined\" as string, weird, bailing')\r\n        }\r\n        localStorage.setItem('id_token', idToken);\r\n        window.location.assign('/home');\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem('id_token');\r\n        window.location.assign('/');\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport AuthService from '../utils/auth';\r\n\r\n\r\nexport default function Navbar() {\r\n\r\n  const logout = (event) => {\r\n    event.preventDefault();\r\n    AuthService.logout();\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"primary\"\r\n            aria-label=\"menu\"\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Stance\r\n          </Typography>\r\n          {AuthService.loggedIn() ? (\r\n            <React.Fragment>\r\n              <Button color=\"secondary\" variant=\"contained\" onClick={logout}>Logout</Button>\r\n              <Button color=\"secondary\" variant=\"contained\" href=\"/createTransaction\">Create Transaction</Button>\r\n              <Button color=\"secondary\" variant=\"contained\" href=\"/createAccount\">Create Account</Button>\r\n            </React.Fragment>\r\n          ):(\r\n            <React.Fragment></React.Fragment>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport RestoreIcon from '@mui/icons-material/Restore';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\nimport {BottomNavigation, BottomNavigationAction} from '@mui/material';\r\n// import { useLocation, useHistory } from 'react-router-dom';\r\n\r\nexport default function Footer() {\r\n    // const location = useLocation();\r\n    // const history = useHistory();\r\n\r\n    const [value, setValue] = useState('home');\r\n\r\n    return (\r\n        <BottomNavigation\r\n        showLabels\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        >\r\n            <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} />\r\n            <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />\r\n            <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} />\r\n        </BottomNavigation>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport {FormControl, InputLabel, Select, MenuItem, Button} from '@mui/material';\r\nimport {Autocomplete, TextField} from '@mui/material';\r\n\r\nexport default function CoreDetails({parties, values, handleChange, handleSelectChange, nextStep}) {\r\n\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    // checks that the form is submittable, if it fails, sets error state and returns false, else true\r\n    const validateFormSubmit = () => {\r\n        let valid = true;\r\n        let errorBuffer = [];\r\n\r\n        //check name\r\n        if(!values.name){\r\n            errorBuffer.push('You need to name your account');\r\n        }\r\n        //check balance exists\r\n        if(!values.openingBalance){\r\n            // exclude if value is default 0\r\n            if(values.openingBalance !== 0){\r\n                errorBuffer.push('You need set a balance for your account');\r\n            }\r\n        }\r\n        //check balance is a float\r\n        if(values.openingBalance){\r\n            if (isNaN(values.openingBalance) && !values.openingBalance.toString().indexOf('.') !== -1){\r\n                errorBuffer.push('That balance isn\\'t valid');\r\n            }\r\n        }\r\n        setErrors(errorBuffer)\r\n\r\n        if(errorBuffer.length > 0){\r\n            valid = false\r\n        }\r\n\r\n        return valid\r\n    }\r\n\r\n    const progress = (e) => {\r\n        e.preventDefault();\r\n\r\n        // check the state is correct before progressing\r\n        if(validateFormSubmit()){\r\n            console.log('Progressing form');\r\n            nextStep();\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControl sx={{width: '25ch'}}>\r\n                <InputLabel id=\"type\">Type</InputLabel>\r\n                <Select\r\n                    labelId=\"type\"\r\n                    id=\"type\"\r\n                    value={values.type}\r\n                    label=\"Type\"\r\n                    onChange={handleChange('type')}\r\n                >\r\n                    <MenuItem value={\"money\"}>money</MenuItem>\r\n                    <MenuItem value={\"crypto\"}>crypto</MenuItem>\r\n                    <MenuItem value={\"stock\"}>stock</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField \r\n            id=\"accountName\" \r\n            onChange={handleChange('name')} \r\n            label=\"Account Name\" \r\n            value={values.name} \r\n            placeholder=\"My new account\"/>\r\n\r\n            <TextField \r\n            id=\"openingBalance\" \r\n            onChange={handleChange('openingBalance')} \r\n            label=\"Balance\" \r\n            value={values.openingBalance} \r\n            placeholder=\"0.00\"/>\r\n\r\n            <Autocomplete\r\n                disablePortal\r\n                clearOnBlur\r\n                selectOnFocus\r\n                handleHomeEndKeys\r\n                id=\"3partyAffiliate\"\r\n                name='3partyAffiliate'\r\n                options={parties}\r\n                getOptionLabel={(option) => option.name}\r\n                isOptionEqualToValue={(option, value) => option.name === value.name}\r\n                sx={{ width: 300 }}\r\n                onChange={handleSelectChange()}\r\n                renderInput={(params) => <TextField {...params} label=\"3rd Party\" />}\r\n            />\r\n            <Button onClick={progress} variant=\"outlined\">Continue</Button>\r\n            <Button href=\"/home\" variant=\"outlined\">Cancel</Button>\r\n            <div id=\"error\">\r\n                {errors.map((error) => {\r\n                    return <div>{error}</div>\r\n                })}\r\n            </div> \r\n        </div>\r\n    )\r\n}","import { Autocomplete, TextField, Button, InputAdornment } from '@mui/material'\r\nimport React, {useState} from 'react'\r\n\r\nexport default function SpecificMoneyDetails({currencies, handleSelectCurrency, handleChange, values, nextStep, prevStep}) {\r\n\r\n\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    // checks that the form is submittable, if it fails, sets error state and returns false, else true\r\n    const validateFormSubmit = () => {\r\n        let valid = true;\r\n        let errorBuffer = [];\r\n\r\n        console.log('state is: ',values);\r\n\r\n        //check currency\r\n        if(!values.currency){\r\n            errorBuffer.push('You need to choose a currency');\r\n        }\r\n        //check optional interest rate is a float\r\n        if(values.interestRate){\r\n            if (isNaN(values.interestRate) && !values.interestRate.toString().indexOf('.') !== -1){\r\n                errorBuffer.push('That interest rate looks wrong');\r\n            }\r\n        }\r\n\r\n        setErrors(errorBuffer)\r\n\r\n        if(errorBuffer.length > 0){\r\n            valid = false\r\n        }\r\n        console.log('Form Valid');\r\n        return valid\r\n    }\r\n\r\n    const progress = (e) => {\r\n        e.preventDefault();\r\n\r\n        // check the state is correct before progressing\r\n        if(validateFormSubmit()){\r\n            console.log('Progressing form');\r\n            nextStep();\r\n        }\r\n    }\r\n\r\n    const backup = (e) => {\r\n        e.preventDefault();\r\n        prevStep();\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Specific Money Details</h1>\r\n            <Autocomplete\r\n                disablePortal\r\n                clearOnBlur\r\n                selectOnFocus\r\n                handleHomeEndKeys\r\n                id=\"currency\"\r\n                name='currency'\r\n                options={currencies}\r\n                getOptionLabel={(option) => option.name}\r\n                isOptionEqualToValue={(option, value) => option.name === value.name}\r\n                sx={{ width: 300 }}\r\n                onChange={handleSelectCurrency()}\r\n                renderInput={(props) => <TextField {...props} label=\"Currency\" />}\r\n            />\r\n            <TextField\r\n                label=\"Interest Rate\"\r\n                id=\"interestRate\"\r\n                onChange={handleChange('interestRate')}\r\n                InputProps={{\r\n                    endAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\r\n            }} \r\n            />\r\n            <Button onClick={progress} variant=\"outlined\">Continue</Button>\r\n            <Button onClick={backup} variant=\"outlined\">Back Up</Button>\r\n            <div id=\"error\">\r\n                {errors.map((error) => {\r\n                    return <div>{error}</div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Autocomplete, TextField, Button, InputAdornment, FormControl, FormControlLabel, Select } from '@mui/material'\r\nimport React, {useState} from 'react'\r\nexport default function SpecificCryptoDetails({cryptos, handleSelectCrypto, values, nextStep, prevStep}) {\r\n\r\n\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    // checks that the form is submittable, if it fails, sets error state and returns false, else true\r\n    const validateFormSubmit = () => {\r\n        let valid = true;\r\n        let errorBuffer = [];\r\n\r\n        console.log('state is: ',values);\r\n\r\n        //check there is an assetCode\r\n        if(!values.assetCode){\r\n            errorBuffer.push('You need to specify a ticker code');\r\n        }\r\n\r\n        setErrors(errorBuffer)\r\n\r\n        if(errorBuffer.length > 0){\r\n            valid = false\r\n        }\r\n\r\n        return valid\r\n    }\r\n\r\n    const progress = (e) => {\r\n        e.preventDefault();\r\n\r\n        // check the state is correct before progressing\r\n        if(validateFormSubmit()){\r\n            console.log('Progressing form');\r\n            nextStep();\r\n        }\r\n    }\r\n\r\n    const backup = (e) => {\r\n        e.preventDefault();\r\n        prevStep();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Specific Crypto Details</h1>\r\n            <Autocomplete\r\n                disablePortal\r\n                clearOnBlur\r\n                selectOnFocus\r\n                handleHomeEndKeys\r\n                id=\"crypto\"\r\n                name='crypto'\r\n                options={cryptos}\r\n                getOptionLabel={(option) => option}\r\n                isOptionEqualToValue={(option, value) => option === value}\r\n                sx={{ width: 300 }}\r\n                onChange={handleSelectCrypto()}\r\n                renderInput={(params) => <TextField {...params} label=\"Crypto\" />}\r\n            />\r\n            <div id=\"error\">\r\n                {errors.map((error) => {\r\n                    return <div>{error}</div>\r\n                })}\r\n            </div>\r\n            <Button onClick={backup} variant=\"outlined\">Back Up</Button>\r\n            <Button onClick={progress} variant=\"outlined\">Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_USER_ACCOUNTS = gql`\r\n    query {\r\n        userAccounts{\r\n            _id\r\n            name\r\n            type\r\n            balance\r\n            unitPrice\r\n            currency{\r\n                name\r\n                usdValue\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const QUERY_ACCOUNT_TRANSACTIONS = gql`\r\n    query userAccountTransactions(\r\n        $accountId: String!\r\n    ){\r\n        userAccountTransactions(\r\n        accountId: $accountId\r\n        ){\r\n            description\r\n            amount\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nexport const QUERY_GET_ALL_PARTIES = gql`\r\n    query{\r\n        allParties{\r\n            _id\r\n            name\r\n            type\r\n            user{\r\n                username\r\n            }\r\n            description\r\n            website\r\n            logo\r\n            style {\r\n                color\r\n                shade\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const QUERY_GET_ALL_CURRENCIES = gql`\r\n    query{\r\n        allCurrencies{\r\n            _id\r\n            code\r\n            name\r\n            symbol\r\n            usdValue\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const QUERY_GET_ALL_EXCHANGES = gql`\r\n    query{\r\n        allExchanges{\r\n            _id\r\n            code\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const QUERY_GET_ALL_PRIMITIVES = gql`\r\nquery{\r\n    getAllPrimitives{\r\n        currencies{\r\n          _id\r\n          name\r\n          code\r\n        }\r\n        exchanges{\r\n          _id\r\n          name\r\n          code\r\n        }\r\n        parties {\r\n          _id\r\n          name\r\n        }\r\n        cryptos{\r\n            Code\r\n            Name\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const QUERY_STOCK_CHECK = gql`\r\n    query checkStockCode(\r\n        $assetCode: String!\r\n        $exchangeCode: String!\r\n    ){\r\n        checkStockCode(\r\n        assetCode: $assetCode\r\n        exchangeCode: $exchangeCode\r\n        ){\r\n            exists\r\n            unitPrice\r\n            name\r\n        }\r\n    }\r\n`;","import { Autocomplete, TextField, Button, InputAdornment, FormControl, FormControlLabel, Select } from '@mui/material'\r\nimport React, {useState} from 'react'\r\nimport {QUERY_STOCK_CHECK} from '../../utils/queries';\r\nimport { useLazyQuery } from '@apollo/client';\r\n\r\nexport default function SpecificStockDetails({exchanges, handleSelectExchange, handleChange, values, nextStep, prevStep}) {\r\n\r\n\r\n    const [errors, setErrors] = useState([]);\r\n    var valid = false;\r\n\r\n    const [stockCheck, { loading, error, data }] = useLazyQuery(QUERY_STOCK_CHECK);\r\n\r\n\r\n\r\n    const searchCode = (e) => {\r\n        stockCheck({\r\n            variables: {\r\n                \"assetCode\": values.assetCode,\r\n                \"exchangeCode\": values.exchangeCode\r\n            }\r\n        })\r\n    }\r\n\r\n    // checks that the form is submittable, if it fails, sets error state and returns false, else true\r\n    const validateFormSubmit = () => {\r\n        let valid = true;\r\n        let errorBuffer = [];\r\n\r\n        console.log('state is: ',values);\r\n\r\n        //check currency\r\n        if(!values.assetCode){\r\n            errorBuffer.push('You need to specify a ticker code');\r\n        }\r\n\r\n        setErrors(errorBuffer)\r\n\r\n        if(errorBuffer.length > 0){\r\n            valid = false\r\n        }\r\n\r\n        return valid\r\n    }\r\n\r\n    const progress = (e) => {\r\n        e.preventDefault();\r\n\r\n        // check the state is correct before progressing\r\n        if(validateFormSubmit()){\r\n            console.log('Progressing form');\r\n            nextStep();\r\n        }\r\n    }\r\n\r\n    const backup = (e) => {\r\n        e.preventDefault();\r\n        prevStep();\r\n\r\n    }\r\n\r\n    // if the user query is valid\r\n    if(data){\r\n        if(data.checkStockCode.exists){\r\n            valid = true\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Specific Asset Details</h1>\r\n            <Autocomplete\r\n                disablePortal\r\n                clearOnBlur\r\n                selectOnFocus\r\n                handleHomeEndKeys\r\n                id=\"exchange\"\r\n                name='exchange'\r\n                options={exchanges}\r\n                getOptionLabel={(option) => option.name}\r\n                isOptionEqualToValue={(option, value) => option.name === value.name}\r\n                sx={{ width: 300 }}\r\n                onChange={handleSelectExchange()}\r\n                renderInput={(props) => <TextField {...props} label=\"Exchange\" />}\r\n            />\r\n            <TextField\r\n                label=\"Ticker Code\"\r\n                id=\"assetCode\"\r\n                onChange={handleChange('assetCode')}\r\n            />\r\n            <div id=\"error\">\r\n                {errors.map((error) => {\r\n                    return <div>{error}</div>\r\n                })}\r\n            </div>\r\n            <Button onClick={searchCode} variant=\"outlined\">Search Code</Button>\r\n            <Button onClick={backup} variant=\"outlined\">Back Up</Button>\r\n            {\r\n                loading\r\n                ? <div>Checking your ticker</div>\r\n                : <div></div>\r\n            }\r\n            {valid\r\n                ?<div>\r\n                    Valid Ticker Code\r\n                    <Button onClick={progress} variant=\"outlined\">Continue</Button>\r\n                </div>\r\n                :<div>\r\n                    Not Valid Ticker Code\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import { gql } from '@apollo/client';\r\n\r\nexport const SIGN_IN = gql`\r\n    mutation signIn($email: String!, $password: String!){\r\n        signIn(email: $email, password: $password){\r\n            token\r\n            user{\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SIGN_UP = gql`\r\n    mutation signUp($username: String!, $email: String!, $password: String!\r\n    ){\r\n        signUp(username: $username,email: $email,password: $password\r\n        ){\r\n            token\r\n            user{\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TRANSACTION = gql`\r\n    mutation createTransaction(\r\n        $toAccount: String!,\r\n        $fromAccount: String!,\r\n        $description: String!,\r\n        $date: String!,\r\n        $amount: Float,\r\n        $frequency: String!,\r\n        $endRecurrence: String\r\n    ){\r\n        createTransaction(\r\n        input: {\r\n            toAccount: $toAccount,\r\n            fromAccount: $fromAccount,\r\n            description: $description,\r\n            date: $date,\r\n            amount: $amount,\r\n            frequency: $frequency,\r\n            endRecurrence: $endRecurrence\r\n        }\r\n        ) {\r\n        fromAccount{\r\n            name\r\n        }\r\n        toAccount{\r\n            name\r\n        }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ACCOUNT_FE = gql`\r\n    mutation createAccountFE(\r\n        $name: String!\r\n        $type: String!\r\n        $openingBalance: Float!\r\n        $interestRate: Float\r\n        $compounds: String\r\n        $party: String\r\n        $assetCode: String\r\n        $currency: String\r\n        $exchangeCode: String\r\n        $goalDate: String\r\n        $goalAmount: Float\r\n        $tags: String\r\n    ){\r\n        createAccountFE(\r\n        input: {\r\n            name: $name\r\n            type: $type\r\n            openingBalance: $openingBalance\r\n            interestRate: $interestRate\r\n            compounds: $compounds\r\n            party: $party\r\n            assetCode: $assetCode\r\n            currency: $currency\r\n            exchangeCode: $exchangeCode\r\n            goalDate: $goalDate\r\n            goalAmount: $goalAmount\r\n            tags: $tags\r\n        }\r\n        ){\r\n        user{\r\n            username\r\n        }\r\n        name\r\n        openingBalance\r\n        balance\r\n        type\r\n        compounds\r\n        party{\r\n            name\r\n        }\r\n        currency{\r\n            code\r\n        }\r\n        exchange{\r\n            name\r\n        }\r\n        }\r\n    }\r\n`;","import React, {useState} from 'react'\r\nimport {Button, TextField, InputAdornment} from '@mui/material';\r\nimport { useMutation } from '@apollo/client';\r\nimport {DatePicker} from '@mui/lab';\r\nimport enLocale from 'date-fns/locale/en-GB';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport { CREATE_ACCOUNT_FE } from '../../utils/mutations';\r\n\r\nexport default function TagGoalDetails({values, handleChange,handleGoalDateChange, prevStep}) {\r\n\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    // prepare the return mutation for creating query\r\n    const [createAccount, accountReturn] = useMutation(CREATE_ACCOUNT_FE);\r\n\r\n    if (accountReturn.loading) return 'Submitting...';\r\n\r\n    if (accountReturn.error) {\r\n        console.log(accountReturn.error.message)\r\n    };\r\n\r\n    if (accountReturn.data) {\r\n        console.log('Congratulations you beautiful man')\r\n        console.log(accountReturn.data)\r\n    };\r\n\r\n    const validateFormSubmit = () => {\r\n        let valid = true;\r\n        let errorBuffer = [];\r\n\r\n        // if we have either a goal amount or a goal date\r\n        if(values.goalDate || values.goalAmount){\r\n            // we must have both\r\n            if(!(values.goalDate && values.goalAmount)){\r\n                errorBuffer.push('You need a date and an amount if you want to set a goal at all - get serious')\r\n            }\r\n        }\r\n\r\n        //check is the date is set to the future\r\n        if(values.goalDate){\r\n            if(values.goalDate < new Date()){\r\n                errorBuffer.push('Goal Date must be in the future');\r\n            }\r\n        }\r\n\r\n        //check balance is a float\r\n        if(values.goalAmount){\r\n            if (isNaN(values.goalAmount) && !values.goalAmount.toString().indexOf('.') !== -1){\r\n                errorBuffer.push('That goal amount isn\\'t valid');\r\n            }\r\n        }\r\n\r\n        setErrors(errorBuffer)\r\n\r\n        if(errorBuffer.length > 0){\r\n            valid = false\r\n        }\r\n\r\n        return valid\r\n    }\r\n\r\n    const progress = (e) => {\r\n        e.preventDefault();\r\n        console.log('Sending form');\r\n\r\n        // check the state is correct before progressing\r\n        if(validateFormSubmit()){\r\n            console.log('Valid form sending');\r\n            sendForm();\r\n        }\r\n    }\r\n\r\n    const backup = (e) => {\r\n        e.preventDefault();\r\n        prevStep();\r\n\r\n    }\r\n\r\n    const sendForm = () => {\r\n        console.log(values);\r\n        createAccount({\r\n            variables: values\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns} locale={enLocale}>\r\n            <h1>Tags and Goal</h1>\r\n            <TextField \r\n                id=\"tags\" \r\n                label=\"Tags\" \r\n                value={values.tags} \r\n                placeholder=\"Low risk, mortgage, 20yrs\"\r\n                onChange={handleChange('tags')} \r\n            />\r\n            <DatePicker\r\n                required=\"false\"\r\n                label='Goal Date'\r\n                value={values.goalDate}\r\n                onChange={(newDate) => handleGoalDateChange(newDate)}\r\n                renderInput={(params) => <TextField {...params} />}\r\n            />\r\n            <TextField \r\n                id=\"goalAmount\" \r\n                label=\"Goal Amount\" \r\n                value={values.goalAmount} \r\n                placeholder=\"10000\"\r\n                onChange={handleChange('goalAmount')}\r\n                InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\r\n                }}\r\n            />\r\n            <Button onClick={progress} variant=\"outlined\">Continue</Button>\r\n            <Button onClick={backup} variant=\"outlined\">Back</Button>\r\n            <Button href=\"/\" variant=\"outlined\">Cancel</Button>\r\n            <div id=\"error\">\r\n                {errors.map((error) => {\r\n                    return <div>{error}</div>\r\n                })}\r\n            </div> \r\n            </LocalizationProvider>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport CoreDetails from './CoreDetails';\r\nimport SpecificMoneyDetails from './SpecificMoneyDetails';\r\nimport SpecificCryptoDetails from './SpecificCryptoDetails';\r\nimport SpecificStockDetails from './SpecificStockDetails';\r\nimport TagGoalDetails from './TagGoalDetails';\r\nimport {QUERY_GET_ALL_PRIMITIVES} from '../../utils/queries';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nconst initialFormState = {\r\n  name: '',\r\n  type: 'money',\r\n  openingBalance: 0,\r\n  interestRate: null,\r\n  compounds: 'monthly',\r\n  party: null,\r\n  currency: '',\r\n  exchangeCode: 'CC',\r\n  assetCode: '',\r\n  tags: '',\r\n  goalAmount: '',\r\n  goalDate: ''\r\n}\r\n\r\nexport default function AccountForm (){\r\n\r\n  const [formState, setFormState] = useState(initialFormState);\r\n  const [step, setStep] = useState(1);\r\n\r\n  const {loading, data} = useQuery(QUERY_GET_ALL_PRIMITIVES, {});\r\n\r\n  const parties = data?.getAllPrimitives.parties || [];\r\n  const currencies = data?.getAllPrimitives.currencies || [];\r\n  const exchanges = data?.getAllPrimitives.exchanges || [];\r\n  const cryptos = data?.getAllPrimitives.cryptos || [];\r\n\r\n  // create list of crypto names\r\n  let cryptoDupNames = cryptos.map((crypto) => crypto.Name);\r\n  // create uniq list of names\r\n  const uniqueCryptos = cryptoDupNames.filter((value, index) => cryptoDupNames.indexOf(value) === index);\r\n  \r\n  // Proceed to next step\r\n  const nextStep = () => {\r\n    setStep(step + 1);\r\n  };\r\n\r\n  // Go back to prev step\r\n  const prevStep = () => {\r\n    setStep(step - 1);\r\n  };\r\n\r\n  // Handle fields change\r\n  const handleChange = input => e => {\r\n    console.log('Handling Change');\r\n    console.log(input, e);\r\n\r\n    let newValue = e.target.value;\r\n\r\n    let floated = parseFloat(newValue);\r\n    if(!isNaN(floated)){\r\n      newValue = floated\r\n    }\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [input]: newValue\r\n    });\r\n  };\r\n\r\n  console.log('current Step: ',step)\r\n\r\n  const handleSelectParty = () => e => {\r\n    console.log('Handling Exchange change');\r\n    console.log('event: ',e);\r\n\r\n    let partyName = e.target.textContent;\r\n    let partyId = ''\r\n\r\n    console.log('Party Name of event: ', partyName);\r\n\r\n    if(partyName){\r\n      let party = parties.find(party => party.name === partyName);\r\n      partyId = party._id;\r\n    } else {\r\n      partyId = ''\r\n    }\r\n    console.log('PartyId after filtering data: ', partyId);\r\n    \r\n\r\n    setFormState({\r\n      ...formState,\r\n      'party': partyId\r\n    });\r\n  };\r\n\r\n  const handleSelectCurrency = () => e => {\r\n    console.log('Handling Currency change');\r\n    console.log('event: ',e);\r\n\r\n    let CurrencyName = e.target.textContent;\r\n    let currencyId = ''\r\n\r\n    console.log('Currency Name of event: ', CurrencyName);\r\n\r\n    if(CurrencyName){\r\n      let currency = currencies.find(currency => currency.name === CurrencyName);\r\n      currencyId = currency._id;\r\n    } else {\r\n      currencyId = ''\r\n    }\r\n    console.log('CurrencyId after filtering data: ', currencyId);\r\n    \r\n\r\n    setFormState({\r\n      ...formState,\r\n      'currency': currencyId\r\n    });\r\n  }\r\n\r\n  const handleSelectExchange = () => e => {\r\n    console.log('Handling Exchange change');\r\n    console.log('event: ',e);\r\n\r\n    let exchangeName = e.target.textContent;\r\n    let exchangeCode = ''\r\n\r\n    console.log('Exchange Name of event: ', exchangeName);\r\n\r\n    if(exchangeName){\r\n      let exchange = exchanges.find(exchange => exchange.name === exchangeName);\r\n      exchangeCode = exchange.code;\r\n    } else {\r\n      exchangeCode = ''\r\n    }\r\n    console.log('Exchange after filtering data: ', exchangeCode);\r\n    \r\n\r\n    setFormState({\r\n      ...formState,\r\n      'exchangeCode': exchangeCode\r\n    });\r\n  }\r\n\r\n  const handleSelectCrypto = () => e => {\r\n    console.log('Handling Crypto change');\r\n    console.log('event: ',e);\r\n\r\n    let cryptoName = e.target.textContent;\r\n    let cryptoCode = ''\r\n\r\n    console.log('Crypto Name of event: ', cryptoName);\r\n\r\n    if(cryptoName){\r\n      let crypto = cryptos.find(crypto => crypto.Name === cryptoName);\r\n      cryptoCode = crypto.Code;\r\n    } else {\r\n      cryptoCode = ''\r\n    }\r\n    console.log('Crypto after filtering data: ', cryptoCode);\r\n    \r\n\r\n    setFormState({\r\n      ...formState,\r\n      'assetCode': cryptoCode\r\n    });\r\n  }\r\n\r\n  const handleGoalDateChange = (date) => {\r\n    console.log('state date: ',date);\r\n    setFormState({\r\n      ...formState,\r\n      'goalDate': date\r\n    });\r\n  }\r\n\r\n  const { type, name, openingBalance, interestRate, compounds, party, currency, exchangeCode, assetCode, tags, goalAmount, goalDate } = formState;\r\n  const values = { type, name, openingBalance, interestRate, compounds, party, currency, exchangeCode, assetCode, tags, goalAmount, goalDate };\r\n\r\n  if(loading){\r\n    return ( \r\n      <div>Loading Your Data</div>\r\n    )\r\n  }\r\n\r\n  switch (step) {\r\n    case 1:\r\n      return (\r\n        <CoreDetails parties={parties} values={values} handleChange={handleChange} handleSelectChange={handleSelectParty} nextStep={nextStep}/>\r\n      );\r\n    case 2:\r\n      if(values.type === 'money'){\r\n        return (\r\n          <SpecificMoneyDetails values={values} currencies={currencies} handleSelectCurrency={handleSelectCurrency} nextStep={nextStep} prevStep={prevStep} handleChange={handleChange}/>\r\n        )\r\n      } else if(values.type === 'crypto'){\r\n        return (\r\n          <SpecificCryptoDetails values={values} cryptos={uniqueCryptos} handleSelectCrypto={handleSelectCrypto} nextStep={nextStep} prevStep={prevStep} handleChange={handleChange}/>\r\n        )\r\n        \r\n      } else if(values.type === 'stock'){\r\n        return (\r\n          <SpecificStockDetails values={values} exchanges={exchanges} handleSelectExchange={handleSelectExchange} nextStep={nextStep} prevStep={prevStep} handleChange={handleChange}/>\r\n        )\r\n      } else {\r\n        return (\r\n          <div>Empty return</div>\r\n        )\r\n      }\r\n    case 3:\r\n      return (\r\n        <TagGoalDetails values={values} handleChange={handleChange} prevStep={prevStep} handleGoalDateChange={handleGoalDateChange}/>\r\n      );\r\n    default:\r\n      (console.log('This is a multi-step form built with React.'))\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {Grid} from '@mui/material'\r\nimport {ButtonGroup, Button} from '@mui/material'\r\n\r\n\r\n\r\nexport default function Landing() {\r\n    return (\r\n        <Grid container spacing={2} direction=\"column\" alignItems=\"center\" justifyContent=\"center\" style={{minHeight: '60vh'}}>\r\n            <Grid item xs={12}>\r\n                <ButtonGroup variant=\"text\" aria-label=\"outlined primary button group\">\r\n                    <Button href='/signup'>Sign Up</Button>\r\n                    <Button href=\"/signin\">Sign In</Button>\r\n                </ButtonGroup>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React from 'react'\r\n// import { useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport {Button} from '@mui/material'\r\nimport {QUERY_USER_ACCOUNTS} from '../utils/queries'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Home() {\r\n\r\n    const {loading, data} = useQuery(QUERY_USER_ACCOUNTS, {});\r\n\r\n    const userAccounts = data?.userAccounts || {};\r\n\r\n    if(loading){\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"account-rows\">\r\n            {userAccounts && userAccounts.map((userAccount) => (\r\n                <div key={userAccount._id}>\r\n                    <Button LinkComponent={Link} color=\"secondary\" variant=\"contained\" to={`/account/${userAccount._id}`}>{userAccount.name} {userAccount.balance}</Button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { SIGN_IN } from '../utils/mutations';\r\nimport AuthService from '../utils/auth';\r\n\r\nexport default function SignIn(props) {\r\n\r\n    const [formState, setFormState] = useState({ email: '', password: '' });\r\n    const [login, { error, data }] = useMutation(SIGN_IN);\r\n\r\n    // update state based on form input changes\r\n    const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n        ...formState,\r\n        [name]: value,\r\n    });\r\n    };\r\n\r\n    // submit form\r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(formState);\r\n        try { \r\n            const {data} = await login({\r\n                variables: { ...formState },\r\n            });\r\n\r\n            console.log(`response token from server was`, data.signIn.token);\r\n            AuthService.login(data.signIn.token);\r\n        } catch (e) {\r\n        console.error(e);\r\n        }\r\n\r\n        // clear form values\r\n        setFormState({\r\n            email: '',\r\n            password: '',\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {data ? (\r\n              <p>\r\n                Success! You may now head{' '}\r\n                <Link to=\"/\">back to the homepage.</Link>\r\n              </p>\r\n            ) : (\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  value={formState.email}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"******\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={formState.password}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-primary\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { SIGN_UP } from '../utils/mutations';\r\n\r\nimport AuthService from '../utils/auth';\r\n\r\nconst Signup = () => {\r\n  const [formState, setFormState] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const [signUp, { error, data }] = useMutation(SIGN_UP);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n\r\n    try {\r\n      const { data } = await signUp({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(`response token from server was`, data.signUp.token);\r\n      AuthService.login(data.signUp.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Sign Up</h4>\r\n          <div className=\"card-body\">\r\n            {data ? (\r\n              <p>\r\n                Success! You may now head{' '}\r\n                <Link to=\"/\">back to the homepage.</Link>\r\n              </p>\r\n            ) : (\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your username\"\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  value={formState.name}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  value={formState.email}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"******\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={formState.password}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-primary\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from 'react'\r\n// import { useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport {Button} from '@mui/material'\r\nimport {QUERY_ACCOUNT_TRANSACTIONS} from '../utils/queries'\r\nimport { Link } from 'react-router-dom';\r\nimport {useParams} from 'react-router-dom';\r\n\r\n\r\nexport default function Account() {\r\n\r\n    let params = useParams();\r\n\r\n    console.log(params.id);\r\n\r\n\r\n    const {loading, data} = useQuery(QUERY_ACCOUNT_TRANSACTIONS, {\r\n        variables: {\r\n            'accountId': params.id\r\n        }\r\n    });\r\n\r\n    if(loading){\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    const userAccountTransactions = data?.userAccountTransactions || [];\r\n\r\n\r\n    return (\r\n        <div className=\"account-rows\">\r\n            {userAccountTransactions && userAccountTransactions.map((transaction) => (\r\n                <div key={transaction._id}>\r\n                    <Button LinkComponent={Link} color='primary' variant=\"contained\" to={`/transaction/${(transaction._id)}`}>{transaction.description} {transaction.amount} {transaction.date}</Button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { QUERY_USER_ACCOUNTS } from '../utils/queries';\r\nimport { CREATE_TRANSACTION } from '../utils/mutations';\r\nimport {Autocomplete, TextField, Button, FormControl, InputLabel, Select, MenuItem} from '@mui/material';\r\n\r\nimport {DatePicker} from '@mui/lab';\r\nimport enLocale from 'date-fns/locale/en-GB';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n\r\n\r\n// function filterChoiceFromOptions(choice, options){\r\n//     let remainingOptions = options.filter((option) => choice !== option.name);\r\n//     return remainingOptions\r\n// }\r\n\r\nexport default function CreateTransaction() {\r\n    \r\n\r\n    const [toAccount, setToAccount] = useState({});\r\n    const [fromAccount, setFromAccount] = useState({});\r\n    const [description, setDescription] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const [frequency, setFrequency] = useState('once');\r\n    const [date, setDate] = useState(new Date());\r\n    const [endRecurrence, setEndRecurrence] = useState(null);\r\n\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    // create query to get user accounts\r\n    const {loading, data} = useQuery(QUERY_USER_ACCOUNTS, {});\r\n\r\n    // prepare the return mutation for creating query\r\n    const [createTransaction, transactionReturn] = useMutation(CREATE_TRANSACTION);\r\n\r\n    if (transactionReturn.loading) return 'Submitting...';\r\n\r\n    if (transactionReturn.error) {\r\n        console.log(transactionReturn)\r\n        return `Submission error! ${transactionReturn.error.message}`\r\n    };\r\n\r\n    // get the data from the return and set it to the userAccounts variable\r\n    const userAccounts = data?.userAccounts || [];\r\n    \r\n    // let currentAccountChoice = toAccount.name? toAccount.name : fromAccount.name\r\n    // var accountChoices = filterChoiceFromOptions(currentAccountChoice, userAccounts);\r\n\r\n    \r\n    // update state based on form select changes\r\n    const handleToAccountChange = (e) => {\r\n\r\n        console.log('Handling Currency change');\r\n        console.log('event: ',e);\r\n\r\n        let accountName = e.target.textContent;\r\n        let account = ''\r\n\r\n        console.log('Account of event: ', account);\r\n\r\n        if(accountName){\r\n            account = userAccounts.find(account => account.name === accountName);\r\n            console.log('Account after filtering data: ', account);\r\n            setToAccount({...account});\r\n        // if there is no account on event, update state to be empty\r\n        } else {\r\n            setToAccount({});\r\n        }\r\n        \r\n    };\r\n\r\n    // update state based on form select changes\r\n    const handleFromAccountChange = (e) => {\r\n        console.log('Handling Currency change');\r\n        console.log('event: ',e);\r\n\r\n        let accountName = e.target.textContent;\r\n        let account = ''\r\n\r\n        console.log('Account of event: ', account);\r\n\r\n        if(accountName){\r\n            account = userAccounts.find(account => account.name === accountName);\r\n            console.log('Account after filtering data: ', account);\r\n            setFromAccount({...account});\r\n        // if there is no account on event, update state to be empty\r\n        } else {\r\n            setFromAccount({});\r\n        }\r\n        \r\n    };\r\n\r\n    // update state based on form inputs\r\n    const handleInputChange = ({target}) => {\r\n        console.log('Input Event triggered: ');\r\n        console.log('target: ', target);\r\n\r\n        // to account id is of form id=\"toAccount-option-0\"\r\n        if(target.name === 'description'){\r\n            let value = target.value;\r\n            setDescription(value);\r\n        }\r\n        // to account id is of form id=\"toAccount-option-0\"\r\n        if(target.name === 'amount'){\r\n            let value = target.value;\r\n            setAmount(value);\r\n        }\r\n\r\n        // case for handling frequency field\r\n        if(target.name === 'frequency'){\r\n            setFrequency(target.value);\r\n        }\r\n    }\r\n\r\n    const transferMaximum = () => {\r\n        if(fromAccount.balance > 0){\r\n            let fundsAvailable = fromAccount.balance;\r\n            setAmount(fundsAvailable)\r\n        } else {\r\n            setErrors(['You don\\'t have a positive balance in that from account'])\r\n        }\r\n    }\r\n\r\n    const clearState = () => {\r\n        setToAccount ({});\r\n        setFromAccount({});\r\n        setDescription('');\r\n        setAmount(0);\r\n        setFrequency('once');\r\n        setDate(new Date());\r\n        setEndRecurrence(null)\r\n    }\r\n\r\n    // checks that the form is submittable, if it fails, sets error state and returns false, else true\r\n    const validateFormSubmit = () => {\r\n        let valid = true;\r\n        let errorBuffer = [];\r\n\r\n        //check at least one account\r\n        if(!toAccount?.balance && !fromAccount?.balance){\r\n            errorBuffer.push('You need to choose at least one account');\r\n        }\r\n\r\n        // check accounts aren't equal\r\n        if(toAccount?.balance && fromAccount?.balance){\r\n            if(toAccount.name === fromAccount.name){\r\n                errorBuffer.push('You can\\'t send money to the same account');\r\n            }\r\n        }\r\n\r\n        // check amount is not null\r\n        if(!amount || amount < 0){\r\n            errorBuffer.push('You need to specify a positive amount');\r\n        }\r\n\r\n        // check amount isn't larger than the balance in the from account if there is a from account\r\n        if(fromAccount?.balance){\r\n            if(amount > fromAccount.balance){\r\n                errorBuffer.push(\"You can't transfer more than the balance of the from account for the transaction\")\r\n            }\r\n        }\r\n\r\n        //check fromAccount balance is a float\r\n        if(fromAccount?.balance){\r\n            if (isNaN(fromAccount.balance) && !fromAccount.balance.toString().indexOf('.') !== -1){\r\n                errorBuffer.push('That fromAccount balance isn\\'t valid');\r\n            }\r\n        }\r\n\r\n        //check fromAccount balance is a float\r\n        if(toAccount?.balance){\r\n            if (isNaN(toAccount.balance) && !toAccount.balance.toString().indexOf('.') !== -1){\r\n                errorBuffer.push('That toAccount balance isn\\'t valid');\r\n            }\r\n        }\r\n\r\n        // check there is a description\r\n        if(!description){\r\n            errorBuffer.push('You need to describe the transaction, your future self with thank you');\r\n        }\r\n\r\n        // check that there is a date\r\n        if(!date){\r\n            errorBuffer.push('You need to set a date for this transaction to happen');\r\n        }\r\n        // check that if frequency isn't once, there is a selected endRecurrence\r\n        if(frequency !== 'once' && !endRecurrence){\r\n            errorBuffer.push('You need to specify when this transaction ends');\r\n        }\r\n        setErrors(errorBuffer)\r\n\r\n        if(errorBuffer.length > 0){\r\n            valid = false\r\n        }\r\n\r\n        return valid\r\n    }\r\n\r\n    // submit form\r\n    const handleFormSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try { \r\n            if(validateFormSubmit()){\r\n\r\n                let payload = {\r\n                    toAccount: toAccount._id, \r\n                    fromAccount: fromAccount._id, \r\n                    amount: amount, \r\n                    description: description, \r\n                    date: date, \r\n                    frequency: frequency, \r\n                    endRecurrence: endRecurrence, \r\n                }\r\n\r\n                console.log('payload: ',payload);\r\n\r\n                createTransaction({ \r\n                    variables: payload\r\n                });\r\n                console.log(transactionReturn)\r\n                if(transactionReturn.error){\r\n                    setErrors(transactionReturn.error);\r\n                } else {\r\n                    // refresh and re-fetch user data\r\n                    window.location.reload();\r\n                }\r\n\r\n                clearState()\r\n            }\r\n        } catch (e) {\r\n        console.error(e);\r\n        }\r\n    };\r\n\r\n    if(loading){\r\n        return ( \r\n            <div>Loading Your Details...</div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>NEW TRANSACTION</h1>\r\n            <form onSubmit={handleFormSubmit}>\r\n                <LocalizationProvider dateAdapter={AdapterDateFns} locale={enLocale}>\r\n                    <Autocomplete\r\n                        disablePortal\r\n                        clearOnBlur\r\n                        selectOnFocus\r\n                        handleHomeEndKeys\r\n                        id=\"fromAccount\"\r\n                        name='fromAccount'\r\n                        options={userAccounts}\r\n                        getOptionLabel={(option) => option.name}\r\n                        isOptionEqualToValue={(option, value) => option.name === value.name}\r\n                        sx={{ width: 300 }}\r\n                        onChange={handleFromAccountChange}\r\n                        renderInput={(params) => <TextField {...params} label=\"From Account\" />}\r\n                        />\r\n                    {fromAccount.balance? \r\n                        <div>\r\n                            {fromAccount.balance}\r\n                            <Button onClick={transferMaximum}>Transfer All</Button>\r\n                        </div> \r\n                        : \r\n                        <></>\r\n                    }\r\n                    <Autocomplete\r\n                        disablePortal\r\n                        id=\"toAccount\"\r\n                        name='toAccount'\r\n                        options={userAccounts}\r\n                        getOptionLabel={(option) => option.name}\r\n                        isOptionEqualToValue={(option, value) => option.name === value.name}\r\n                        sx={{ width: 300 }}\r\n                        onChange={handleToAccountChange}\r\n                        renderInput={(params) => <TextField {...params} label=\"To Account\" />}\r\n                    />\r\n                    {toAccount.balance? \r\n                        <div>{toAccount.balance}</div> : <></>\r\n                    }\r\n                    <TextField name='amount' onChange={handleInputChange} label=\"Amount\" value={amount} placeholder=\"0.00\"/>\r\n                    <TextField name='description' onChange={handleInputChange} label=\"Description\" value={description} placeholder=\"A quick note\"/>\r\n\r\n                    <FormControl sx={{width: '25ch'}}>\r\n                        <InputLabel id=\"every\">Frequency</InputLabel>\r\n                        <Select\r\n                            labelId=\"every\"\r\n                            id=\"every\"\r\n                            value={frequency}\r\n                            label=\"How Often\"\r\n                            name='frequency'\r\n                            onChange={handleInputChange}\r\n                        >\r\n                            <MenuItem value={\"once\"}>once</MenuItem>\r\n                            <MenuItem value={\"daily\"}>daily</MenuItem>\r\n                            <MenuItem value={\"weekly\"}>weekly</MenuItem>\r\n                            <MenuItem value={\"fortnightly\"}>fortnightly</MenuItem>\r\n                            <MenuItem value={\"monthly\"}>monthly</MenuItem>\r\n                            <MenuItem value={\"quarterly\"}>quarterly</MenuItem>\r\n                            <MenuItem value={\"yearly\"}>yearly</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <DatePicker\r\n                        label='On Date'\r\n                        value={date}\r\n                        minDate={new Date()}\r\n                        onChange={(newValue) => {\r\n                            // console.log('Updating date state to: ', newValue);\r\n                            setDate(newValue);\r\n                        }}\r\n                        renderInput={(params) => <TextField {...params} />}\r\n                        />\r\n                        {frequency !== 'once'? \r\n                            <DatePicker\r\n                                label='Until'\r\n                                value={endRecurrence}\r\n                                minDate={new Date()}\r\n                                onChange={(newValue) => {\r\n                                    // console.log('Updating end Recurrence state to: ', newValue);\r\n                                    setEndRecurrence(newValue);\r\n                                }}\r\n                                renderInput={(params) => <TextField {...params} />}\r\n                        />: <></>}\r\n                    <Button\r\n                        style={{ cursor: 'pointer' }}\r\n                        type=\"submit\"\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    <div id=\"error\">\r\n                        {errors.map((error) => {\r\n                            return <div>{error}</div>\r\n                        })}\r\n                    </div> \r\n                </LocalizationProvider>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Navbar from './components/Navbar';\r\nimport Footer from './components/Footer';\r\nimport AccountForm from './components/CreateAccountSteps/CreateAccountSteps';\r\n\r\nimport Landing from './pages/Landing';\r\nimport Home from './pages/Home';\r\nimport SignIn from './pages/SignIn';\r\nimport SignUp from './pages/SignUp';\r\nimport Account from './pages/Account';\r\nimport CreateTransaction from './pages/CreateTransaction'\r\nimport { ThemeProvider } from '@mui/material';\r\nimport { Container, createTheme } from '@mui/material';\r\n\r\nimport './App.css';\r\nimport AuthService from './utils/auth';\r\n\r\nimport '@fontsource/saira';\r\n\r\n\r\n// Construct our main GraphQL API endpoint\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:4000/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = AuthService.getToken();\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst apolloClient = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nconst theme = createTheme({\r\n  typography:{\r\n    fontFamily: 'Saira',\r\n    fontWeight: 500\r\n  },\r\n  palette: {\r\n    primary: {\r\n      light: '#af8dff',\r\n      main: '#7b5fe0',\r\n      dark: '#4634ad',\r\n      contrastText: '#ffffff',\r\n    },\r\n    secondary: {\r\n      light: '#67ffd6',\r\n      main: '#00eaa4',\r\n      dark: '#00b675',\r\n      contrastText: '#000000',\r\n    },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <ThemeProvider theme={theme}>\r\n        <Router>\r\n          <Navbar/>\r\n            <Container >\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  <Landing />\r\n                </Route>\r\n                <Route exact path=\"/signin\">\r\n                  <SignIn />\r\n                </Route>\r\n                <Route exact path=\"/signup\">\r\n                  <SignUp />\r\n                </Route>\r\n                <Route exact path=\"/home\">\r\n                  <Home />\r\n                </Route>\r\n                <Route exact path=\"/account/:id\">\r\n                  <Account/>\r\n                </Route>\r\n                <Route exact path=\"/createTransaction\">\r\n                  <CreateTransaction/>\r\n                </Route>\r\n                <Route exact path=\"/createAccount\">\r\n                  <AccountForm />\r\n                </Route>\r\n              </Switch>\r\n            </Container>\r\n          <Footer />\r\n        </Router>\r\n      </ThemeProvider>\r\n    </ApolloProvider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}